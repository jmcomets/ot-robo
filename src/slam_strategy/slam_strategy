#!/usr/bin/env python
import os
import sys
import time
import itertools
import functools
import threading
import numpy as np
# ros modules
import rospy
import tf
from nav_msgs.msg import OccupancyGrid
from slam_strategy.msg import Planification, PlanificationPos
# our modules
this_dir = os.path.dirname(os.path.realpath(__file__))
sys.path.insert(0, os.path.join(this_dir, 'src'))
from graphs import GridGraph
from pathfinding import astar
from motion import follow_path

# initialization
rospy.init_node('slam_strategy', log_level=rospy.DEBUG)
transform_listener = tf.TransformListener()

# constants (distances are in cm)
bot_radius = 10
horizon_distance = 0.75
ai_rate = 1
position_poller_rate = 1

class Map(GridGraph):
    EMPTY = 0
    UNKNOWN = -1
    OBSTACLE = 100

    def __init__(self, map_data, width, height):
        self.map_data = map_data
        self.width = width
        self.height = height

    def neighbors(self, node):
        for node in GridGraph.neighbors(self, node):
            if not self.is_obstacle(node):
            #if not self.has_nearby_obstacle(node):
                yield node

    def has_nearby_obstacle(self, node):
        # use a cache for faster lookup?
        node_x, node_y = node
        for x in range(int(node_x - bot_radius), int(node_x + bot_radius)):
            for y in range(int(node_y - bot_radius), int(node_y + bot_radius)):
                if self.is_obstacle((x, y)):
                    return True
        return False

    def is_obstacle(self, node):
        return self.data_at(node) == self.OBSTACLE

    def is_unknown(self, node):
        return self.data_at(node) == self.UNKNOWN

    def is_empty(self, node):
        return self.data_at(node) == self.EMPTY

    def data_at(self, node):
        x, y = node
        return self.map_data[x][y]

def squared_distance(first, second):
    """Compute the squared distance between two positions (tuples)."""
    return (first[0] - second[0])** 2 + (first[1] - second[1]) ** 2

def euclidean_distance(first, second):
    """Compute the euclidean distance between two positions (tuples)."""
    return squared_distance(first, second) ** 0.5

# A* partial with `squared_distance` as heuristic
find_path = functools.partial(astar, heuristic=squared_distance)

def flatten(iterable):
    """Itertools recipe: flatten an iterable of iterables."""
    return itertools.chain.from_iterable(iterable)

def path_to_waypoints(path):
    """Simplify a path to a list of waypoints."""
    if not path:
        raise ValueError('path should not be empty')

    # initialization
    waypoints = [path[0]]
    dx, dy = None, None
    previous = waypoints[-1]

    # look at the previous (dx, dy) vector and add the previous position as a
    # waypoint if it differs from the current motion vector
    for current in itertools.islice(path, 1, len(path)):
        new_dx, new_dy = current[0] - previous[0], current[1] - previous[1]
        if (dx is not None and dy is not None) and (new_dx != dx or new_dy != dy):
            waypoints.append(previous)
        dx, dy = new_dx, new_dy
        previous = current

    # don't forget the last component
    waypoints.append(current)
    return waypoints

def zone_map(map_, nb_zones):
    """Divide the given map into a number of zones."""
    zones = [[] for _ in range(nb_zones)]
    taken = set()

    # helpers for filtering available candidates for a new zone
    is_candidate = lambda n: map_.is_unknown(n) and n not in taken
    candidates = lambda ns: itertools.ifilter(is_candidate, ns)

    # pull out all available zones
    available_nodes = filter(map_.is_unknown, map_.vertices())
    if not available_nodes: # TODO
        raise RuntimeError('no available nodes')

    # pick the starting points
    for zone in zones:
        while True:
            start = random.choice(available_nodes)
            if start not in flatten(zones):
                break
        zone.append(start)
        taken.add(start)

    # expand each zone by one node until the entire map is filled; this is a
    # bit hard to read due to the zipping
    bfss = [bfs(map_, start, lambda v: candidates(map_.neighbors(v)))
            for start in flatten(zones)]
    zones_completed = set()
    while len(zones_completed) < len(zones):
        for zone_id, zone_nodes in enumerate(itertools.izip(zones, bfss)):
            if zone_id in zones_completed:
                continue
            zone, nodes = zone_nodes
            try:
                node = next(nodes)
            except StopIteration:
                zones_completed.add(zone_id)
            else:
                zone.append(node)
                taken.add(node)
    return zones

def choose_destination(map_, src, min_distance):
    last_node = None
    for node in itertools.ifilter(map_.is_unknown, map_.bfs(src)):
        if squared_distance(src, node) >= min_distance ** 2:
            return node
        last_node = node
    return last_node

# globals
_map_lock = threading.Lock()
_map = None
_position_lock = threading.Lock()
_position = None

def position_poller():
    """Thread safe position updating."""
    while True:
        rospy.logdebug('retrieving the position')
        try:
            t = transform_listener.getLatestCommonTime('/base_footprint', '/map')
            position, quaternion = transform_listener.lookupTransform('/base_footprint', '/map', t)
            orientation = tf.transformations.euler_from_quaternion(quaternion)[2]
        except tf.Exception as e:
            rospy.logerr('error while retrieving the position: %s', e)
        else:
            x, y = position[:2]
            global _position
            with _position_lock:
                _position = x, y, orientation
        finally:
            time.sleep(1 / position_poller_rate)

def map_subscriber(grid):
    """Subscriber for the OccupancyGrid."""
    global _map
    with _map_lock:
        _map = grid

def ai():
    """Full AI using the map and the current position."""
    # handle initialization
    if _map is None or _position is None:
        return

    # get interesting data
    with _map_lock:
        map_data = _map.data
        width, height = _map.info.width, _map.info.height
        resolution = _map.info.resolution
        origin_x, origin_y = _map.info.origin.position.x, _map.info.origin.position.y
        origin_quaternion = _map.info.origin.orientation
        origin_orientation = tf.transformations.euler_from_quaternion(
                (origin_quaternion.x,
                 origin_quaternion.y,
                 origin_quaternion.z,
                 origin_quaternion.w))[2]
    with _position_lock:
        x, y, orientation = _position

    # recalibrate with origin
    x = x / resolution - origin_x
    y = y / resolution - origin_y
    orientation += origin_orientation

    # find path from current position to destination
    map_ = Map(np.reshape(map_data, (width, height)), width, height)
    #rospy.logdebug('position before pathfinding (%s, %s)', x, y)
    #rospy.logdebug('position before pathfinding (%s, %s)', x / resolution, y / resolution)

    # choose destination
    rospy.logdebug('finding next destination at %s m', horizon_distance)
    src = x, y
    t = time.time()
    dest = choose_destination(map_, src, horizon_distance / resolution)
    dt = time.time() - t
    if dest is None:
        rospy.logwarn('no available destination')
        return
    rospy.logdebug('found destination in %s seconds', dt)

    # compute path src -> dest
    rospy.logdebug('computing path from %s to %s', src, dest)
    t = time.time()
    path = find_path(map_, src, dest)
    dt = time.time() - t
    if path is not None:
        rospy.logdebug('path computed in %s seconds', dt)

        # reduce path to waypoints
        t = time.time()
        old_len = len(path)
        path = path_to_waypoints(path)
        dt = time.time() - t
        rospy.logdebug('path reduced from %s to %s elements, took %s seconds', old_len, len(path), dt)

        # scale path to resolution
        for i, position in enumerate(path):
            xp, yp = position
            path[i] = xp * resolution, yp * resolution

        # follow the path (motion)
        follow_path(path, orientation, resolution)
    else:
        rospy.logdebug('no path found, computation took %s seconds', dt)

def run_ai():
    while True:
        ai()
        time.sleep(1 / ai_rate)

# Position polling
position_t = threading.Thread(target=position_poller)
position_t.daemon = True
# AI thread
ai_t = threading.Thread(target=run_ai)
ai_t.daemon = True
position_t.start()
ai_t.start()
rospy.Subscriber('/map', OccupancyGrid, map_subscriber)
rospy.spin()

# vim: ft=python et sw=4 sts=4
