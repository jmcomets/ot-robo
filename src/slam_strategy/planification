#!/usr/bin/env python
import os
import sys
# ros modules
import rospy
import tf
from nav_msgs.msg import OccupancyGrid
# our modules
this_dir = os.path.dirname(os.path.realpath(__file__))
sys.path.insert(0, os.path.join(this_dir, 'src'))
import graphs
from pathfinding import astar as find_path

# initialization
rospy.init_node('planification')
transform_listener = tf.TransformListener()

class Map(graphs.GridGraph):
    def neighbors(self, location):
        for n_location in graphs.GridGraph.neighbors(self, location):
            x, y = n_location
            if self.map_data[x][y] != 100:
                yield n_location

def to_position(position, quaternion):
    euler = tf.transformations.euler_from_quaternion(quaternion)
    return {
            'x': position[0],
            'y': position[1],
            'orientation': euler[2]
            }

def map_subscriber(grid):
    print('slam')

    # try to retrieve the position
    try:
        t = transform_listener.getLatestCommonTime('/base_footprint', '/map')
        position, quaternion = transform_listener.lookupTransform('/base_footprint', '/map', t)
        position = to_position(position, quaternion)
    except tf.Exception:
        return

    # origin
    grid_info = grid.info
    origin = grid_info.origin
    origin = to_position((origin.position.x, origin.position.y),
                         (origin.orientation.x, origin.orientation.y,
                          origin.orientation.z, origin.orientation.w))

    data = {
        'origin': origin,
        'position': position,
        'width': grid_info.width,
        'height': grid_info.height,
        'resolution': grid_info.resolution,
        'data': grid.data
        }

    # recalibrate with origin
    data['position']['x'] = -1 * (data['position']['x'] - data['origin']['x']) / data['resolution']
    data['position']['y'] = data['height'] - (data['position']['y'] - data['origin']['y']) / data['resolution']
    data['position']['orientation'] += data['origin']['orientation']

    print(max(data['data']))

rospy.Subscriber('/map', OccupancyGrid, map_subscriber)
rospy.spin()

# vim: ft=python et sw=4 sts=4
